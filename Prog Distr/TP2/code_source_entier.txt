package compute;

public interface ITask<T> {
    public T execute();
    public ITaskObserver getTaskObserver();
    public int getNumber();
}

-----------------------------------------------------------------------------------------------------------

package compute;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.Calendar;

public interface ICompute extends Remote {
    <T> T executeTask(ITask<T> t) throws RemoteException;
    <T> T executeTask(ITask<T> t, int salience) throws RemoteException;
    <T> T executeTask(ITask<T> t, int salience, Calendar time) throws RemoteException;
}

-----------------------------------------------------------------------------------------------------------

package compute;

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface ITaskObserver extends Remote {
	public void taskEnded(Object result) throws RemoteException;
}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Calendar;

import compute.ICompute;
import compute.ITask;

/**
 * Le serveur qui gère les demandes d'exécution de tâche
 * @author lemeunie
 *
 */
public class ComputeEngineFactory implements ICompute {
	
	private static DComputeEngine dce;
	private static TComputeEngine tce;
	private static FAPComputeEngine fapce;
	
    public ComputeEngineFactory() {}

    /**
     * Exécution d'une tâche immédiate
     */
    public <T> T executeTask(ITask<T> t) {
    	if (dce == null)
    		dce = new DComputeEngine();
    	
    	return dce.execute(new TaskDescriptor<T>(t));
    }
    
    /**
     * Exécution d'une tâche à priorité
     */
	public <T> T executeTask(ITask<T> t, int salience) throws RemoteException {
		if (fapce == null) {
			fapce = new FAPComputeEngine();
			new Thread(fapce).start();
		}
				
		return fapce.execute(new TaskDescriptor<T>(t, salience));
	}

	/**
	 * Exécution d'une tâche datée à priorité 
	 */
	public <T> T executeTask(ITask<T> t, int salience, Calendar time) throws RemoteException {
		if (tce == null) {
			tce = new TComputeEngine();
			new Thread(tce).start();
		}		
		
		return tce.execute(new TaskDescriptor<T>(t, salience, time));
	}

	/**
	 * Methode de demarrage du serveur
	 * @param args
	 */
    public static void main(String[] args) {
        if (System.getSecurityManager() == null) {
            System.setSecurityManager(new SecurityManager());
        }
        try {
            String name = "Compute";
            ICompute engine = new ComputeEngineFactory();
            ICompute stub = (ICompute) UnicastRemoteObject.exportObject(engine, 0);
            Registry registry = LocateRegistry.getRegistry();
            registry.rebind(name, stub);
            System.out.println("ComputeEngine bound");
        } catch (Exception e) {
            System.err.println("ComputeEngine exception:");
            e.printStackTrace();
        }
    }

}

-----------------------------------------------------------------------------------------------------------

package engine;

public interface ComputeEngine {
	public <T> T execute(TaskDescriptor<T> td);
}

-----------------------------------------------------------------------------------------------------------

package engine;

public class DComputeEngine implements ComputeEngine {

	public <T> T execute(TaskDescriptor<T> td) {
		return td.getTask().execute();
	}

}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.util.concurrent.PriorityBlockingQueue;

public abstract class ComputeEngineNotifier implements ComputeEngine, Runnable {

	protected PriorityBlockingQueue<TaskDescriptor> tds;
	protected TaskNotifier tn;
	
	public ComputeEngineNotifier() {
		tds = new PriorityBlockingQueue<TaskDescriptor>(20, new TaskComparator<TaskDescriptor>());		
		tn = new TaskNotifier();
        new Thread(tn).start();
	}
	
	public synchronized <T> T execute(TaskDescriptor<T> td) {
		tds.add(td);
		return null;
	}	
}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.util.Calendar;

public class TComputeEngine extends ComputeEngineNotifier {

	public TComputeEngine() {
		super();
	}

	@SuppressWarnings("unchecked")
	public void run() {
		while(true) {
			try {
				Thread.sleep(20);
				
				if (!tds.isEmpty()) {
					TaskDescriptor td = tds.peek();
					int diff = td.getTime().get(Calendar.MINUTE) - Calendar.getInstance().get(Calendar.MINUTE);					
					if (Math.abs(diff) <= 1) {				
						td = tds.poll();
						td.setResult(td.getTask().execute());
						tn.addTaskObserver(td);
					}
				}				
			} catch (InterruptedException e) {
				e.printStackTrace();
			}			
		}
	}
}

-----------------------------------------------------------------------------------------------------------

package engine;

public class FAPComputeEngine extends ComputeEngineNotifier {

	public FAPComputeEngine() {
		super();
	}
	
	@SuppressWarnings("unchecked")
	public void run() {
		while(true) {
			try {
				Thread.sleep(20);
				
				if (!tds.isEmpty()) {										
					TaskDescriptor td = tds.poll();
					td.setResult(td.getTask().execute());
					tn.addTaskObserver(td);
				}
				
			} catch (InterruptedException e) {
				e.printStackTrace();
			}			
		}
	}
	
}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.util.Comparator;

import compute.ITask;

public class TaskComparator<T> implements Comparator<TaskDescriptor> {

	@SuppressWarnings("unchecked")
	public int compare(TaskDescriptor td1, TaskDescriptor td2) {
		
		ITask<T> t1 = td1.getTask();
		ITask<T> t2 = td2.getTask();
						
		// Si les deux mêmes tâches
		if (t1.equals(t2))
			return 0;
		
		// S'il s'agit de deux tâches normales
		if (td1.getTime() == null && td2.getTime() == null) {
			
			// Même priorité
			if (td1.getSalience() == td2.getSalience())				
				return 0;
			
			// t1 plus prioritaire
			if (td1.getSalience() > td2.getSalience()) {		
				return -1;
			}
			
			// t2 plus prioritaire
			return 1;
		}
		
		// S'il s'agit de deux tâches datées
		if (td1.getTime() != null && td2.getTime() != null) {			
						
			int tps = td1.getTime().compareTo(td2.getTime());
			
			// Même moment
			if (tps == 0) {
				// Même priorité
				if (td1.getSalience() == td2.getSalience())				
					return 0;
				
				// t1 plus prioritaire
				if (td1.getSalience() > td2.getSalience())
					return -1;
				
				// t2 plus prioritaire
				return 1;	
			}
							
			// Temps différent
			return tps;
		}			
			
		return 0; // Dans les autres cas toutes les tâches sont de même priorité		
	}

}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.rmi.RemoteException;
import java.util.Calendar;

import compute.ITask;
import compute.ITaskObserver;

public class TaskDescriptor<T> implements ITaskObserver {

	private ITask<T> task;
	private int salience;
	private Calendar time;
	private T result;
	
	public TaskDescriptor(ITask<T> task) {
		this.task = task;
		this.salience = 0;
		this.time = null;
	}
	
	public TaskDescriptor(ITask<T> task, int salience) {
		this.task = task;
		this.salience = salience;
		this.time = null;
	}
	
	public TaskDescriptor(ITask<T> task, int salience, Calendar time) {
		this.task = task;
		this.salience = salience;
		this.time = time;
	}

	public int getSalience() {
		return salience;
	}

	public ITask<T> getTask() {
		return task;
	}

	public Calendar getTime() {
		return time;
	}

	public T getResult() {
		return result;
	}

	public void setResult(T result) {
		this.result = result;
	}

	public void taskEnded(Object result) {
		try {
			task.getTaskObserver().taskEnded(this.result);
		} catch (RemoteException e) {
			e.printStackTrace();
		}
	}
}

-----------------------------------------------------------------------------------------------------------

package engine;

import java.util.List;
import java.util.LinkedList;

public class TaskNotifier implements Runnable {

	protected List<TaskDescriptor> ts;
	
	public TaskNotifier() {
		ts = new LinkedList<TaskDescriptor>();
	}
	
	public synchronized void addTaskObserver(TaskDescriptor observer) {		
		ts.add(observer);
	}

	public void notifyTaskObservers() {				
		if (!ts.isEmpty())
			ts.remove(ts.size() - 1).taskEnded(null);
	}

	public synchronized void removeTaskObserver(TaskDescriptor observer) {		
		ts.remove(observer);		
	}

	public void run() {
		for (;;) {
			try {
				Thread.sleep(20);
				notifyTaskObservers();
			}
			catch(InterruptedException ie) {};
		}		
	}
}

-----------------------------------------------------------------------------------------------------------

grant codeBase "file:/tmp/TP1/appserver" {
    permission java.security.AllPermission;
};

-----------------------------------------------------------------------------------------------------------

package client;

import compute.ICompute;

import java.math.BigDecimal;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Calendar;

public class Client implements Runnable {
	
	public static void main(String args[]) {
        if (System.getSecurityManager() == null) {
            System.setSecurityManager(new SecurityManager());
        }
        try {
        	
        	new Thread(new Client()).start();
        	
            String name = "Compute";
            Registry registry = LocateRegistry.getRegistry(args[0]);
            ICompute comp = (ICompute) registry.lookup(name);
            
            // Tache immediate
            TaskObserverImpl to1 = new TaskObserverImpl();
            Pi task1 = new Pi(Integer.parseInt(args[1]), to1);
            to1.setTask(task1);            
            BigDecimal pi = comp.executeTask(task1);
            System.out.println("Resultat de la tache [" + task1.getNumber()  + "] : " + pi);
                                            
            // Taches à priorité datée : la 5 avant la 4
            TaskObserverImpl to4 = new TaskObserverImpl();
            TaskObserverImpl to5 = new TaskObserverImpl();
            Pi task4 = new Pi(Integer.parseInt(args[4]), to4);
            Pi task5 = new Pi(Integer.parseInt(args[5]), to5);
            to4.setTask(task4);
            to5.setTask(task5);
            
            Calendar cal = Calendar.getInstance();            
            cal.add(Calendar.MINUTE, 2); // Déclenchement dans 2 minutes
            
            pi = comp.executeTask(task4, 5, cal);
            pi = comp.executeTask(task5, 10, cal);
                                    
            // Taches à priorité : la 2 avant la 3
            TaskObserverImpl to2 = new TaskObserverImpl();
            Pi task2 = new Pi(Integer.parseInt(args[2]), to2);
            to2.setTask(task2);
            
            TaskObserverImpl to3 = new TaskObserverImpl();
            Pi task3 = new Pi(Integer.parseInt(args[3]), to3);
            to3.setTask(task3);
            
            pi = comp.executeTask(task2, 10);
            pi = comp.executeTask(task3, 5);    
            
            
        } catch (Exception e) {
            System.err.println("Client exception:");
            e.printStackTrace();
        }
    }

    
	public void run() {
		while (true) {
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
	}   
}

-----------------------------------------------------------------------------------------------------------

package client;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;

import compute.ITask;
import compute.ITaskObserver;

public class TaskObserverImpl implements ITaskObserver {
	
	private ITask task; 
	
	public TaskObserverImpl() throws RemoteException {
		UnicastRemoteObject.exportObject(this, 0);
	}
	
	public void taskEnded(Object result) throws RemoteException {
		System.out.println("Resultat de la tache [" + task.getNumber() +  "] : " + result);
	}

	public void setTask(ITask task) {
		this.task = task;
	}
	
}

-----------------------------------------------------------------------------------------------------------

package client;

import java.io.Serializable;
import java.math.BigDecimal;

import compute.ITask;
import compute.ITaskObserver;

public class Pi implements ITask<BigDecimal>, Serializable {

    private static final long serialVersionUID = 227L;

    /** constants used in pi computation */
    private static final BigDecimal FOUR = BigDecimal.valueOf(4);

    /** rounding mode to use during pi computation */
    private static final int roundingMode = BigDecimal.ROUND_HALF_EVEN;

    /** digits of precision after the decimal point */
    private final int digits;
    
    private ITaskObserver to;
    
    /**
     * Construct a task to calculate pi to the specified
     * precision.
     */
    public Pi(int digits, ITaskObserver to) {
        this.digits = digits;
        this.to = to;        
    }
        
    public ITaskObserver getTaskObserver() {
    	return to; 
    }
        
    public int getNumber() {
    	return digits;
    }
            
    /**
     * Calculate pi.
     */
    public BigDecimal execute() {    	
    	System.out.println("Execution de la tache [" + digits + "]");
        return computePi(digits);
    }

    /**
     * Compute the value of pi to the specified number of 
     * digits after the decimal point.  The value is 
     * computed using Machin's formula:
     *
     *          pi/4 = 4*arctan(1/5) - arctan(1/239)
     *
     * and a power series expansion of arctan(x) to 
     * sufficient precision.
     */
    public static BigDecimal computePi(int digits) {
        int scale = digits + 5;
        BigDecimal arctan1_5 = arctan(5, scale);
        BigDecimal arctan1_239 = arctan(239, scale);
        BigDecimal pi = arctan1_5.multiply(FOUR).subtract(arctan1_239).multiply(FOUR);
        return pi.setScale(digits, BigDecimal.ROUND_HALF_UP);
    }
    /**
     * Compute the value, in radians, of the arctangent of 
     * the inverse of the supplied integer to the specified
     * number of digits after the decimal point.  The value
     * is computed using the power series expansion for the
     * arc tangent:
     *
     * arctan(x) = x - (x^3)/3 + (x^5)/5 - (x^7)/7 + 
     *     (x^9)/9 ...
     */   
    public static BigDecimal arctan(int inverseX, int scale) 
    {
        BigDecimal result, numer, term;
        BigDecimal invX = BigDecimal.valueOf(inverseX);
        BigDecimal invX2 = BigDecimal.valueOf(inverseX * inverseX);

        numer = BigDecimal.ONE.divide(invX, scale, roundingMode);

        result = numer;
        int i = 1;
        do {
            numer = numer.divide(invX2, scale, roundingMode);
            int denom = 2 * i + 1;
            term = numer.divide(BigDecimal.valueOf(denom), scale, roundingMode);
            if ((i % 2) != 0) {
                result = result.subtract(term);
            } else {
                result = result.add(term);
            }
            i++;
        } while (term.compareTo(BigDecimal.ZERO) != 0);
        return result;
    }
}

-----------------------------------------------------------------------------------------------------------

grant codeBase "file:/tmp/TP1/appclient/" {
    permission java.security.AllPermission;
};
